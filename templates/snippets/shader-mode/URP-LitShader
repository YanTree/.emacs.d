# -*- mode: snippet -*-
# name: URP-LitShader
# key: URP-LitShader
# --
Shader "$0"
{
    Properties
    {
        [MainColor] _BaseColor("Base Color", Color) = (1.0, 1.0, 1.0, 1.0)
        [MainTexture] _BaseMap("Base Map", 2D) = "white" {}
    }

    SubShader
    {
        // SubShader Tags define when and under which conditions a SubShader block or
        // a pass is executed.
        Tags {
                "RenderType" = "Opaque"
                "RenderPipeline" = "UniversalPipeline"
                "UniversalMaterialType" = "Lit"
                "IgnoreProjector" = "True"
        }

        Pass
        {
            Name "ForwardLit"
            Tags
            {
                "LightMode" = "UniversalForward"
            }

            // The HLSL code block. Unity SRP uses the HLSL language.
            HLSLPROGRAM
            // -------------------------------------
            // Shader Stages
            #pragma vertex LitPassVertex
            #pragma fragment LitPassFragment

            // -------------------------------------
            // Material Keywords
            #pragma shader_feature_local _NORMALMAP
            #pragma shader_feature_local_fragment _ALPHATEST_ON

            // -------------------------------------
            // Universal Pipeline keywords
            #pragma multi_compile _ _MAIN_LIGHT_SHADOWS _MAIN_LIGHT_SHADOWS_CASCADE _MAIN_LIGHT_SHADOWS_SCREEN
            // _ADDITIONAL_LIGHTS_VERTEX: per vertex additional lights of URP setting asset
            // _ADDITIONAL_LIGHTS       : per pixel additional lights of URP setting asset
            #pragma multi_compile _ _ADDITIONAL_LIGHTS_VERTEX _ADDITIONAL_LIGHTS

            // -------------------------------------
            // Unity defined keywords
            #pragma multi_compile_fog

            //--------------------------------------
            // GPU Instancing
            #pragma multi_compile_instancing
            #pragma instancing_options renderinglayer
            #include_with_pragmas "Packages/com.unity.render-pipelines.universal/ShaderLibrary/DOTS.hlsl"

            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Lighting.hlsl"

            // Texture/Sampler parameters
            TEXTURE2D(_BaseMap);                 SAMPLER(sampler_BaseMap);
            // CUBFFER for vector parameters
            CBUFFER_START(UnityPerMaterial)
                half4   _BaseColor;
                float4 _BaseMap_ST;
            CBUFFER_END

            struct Attributes
            {
                float4 positionOS   : POSITION;
                float3 normalOS     : NORMAL;
                float4 tangentOS    : TANGENT;
                float2 texcoord     : TEXCOORD0;
                UNITY_VERTEX_INPUT_INSTANCE_ID    // GPU Instance support
            };

            struct Varyings
            {
                float4 positionHCS  : SV_POSITION;
                half4  uv           : TEXCOORD0;
                UNITY_VERTEX_INPUT_INSTANCE_ID    // GPU Instance support
                UNITY_VERTEX_OUTPUT_STEREO        // VR support
            };

            Varyings LitPassVertex(Attributes input)
            {
                Varyings output    = (Varyings)0; // Initialize

                UNITY_SETUP_INSTANCE_ID(input);   // GPU Instance support
                UNITY_TRANSFER_INSTANCE_ID(input, output);
                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(output); // VR support

                output.positionHCS = TransformObjectToHClip(input.positionOS.xyz);
                output.uv.xy       = TRANSFORM_TEX(input.texcoord, _BaseMap);

                return output;
            }

            // The fragment shader definition.
            void LitPassFragment(
                Varyings input
                , out half4 outColor : SV_Target0
            #ifdef _WRITE_RENDERING_LAYERS
                , out float4 outRenderingLayers : SV_Target1
            #endif
            )
            {
                UNITY_SETUP_INSTANCE_ID(input);  // GPU Instance support
                UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(input); // VR support

                half4 color = SAMPLE_TEXTURE2D(_BaseMap, sampler_BaseMap, input.uv.xy);

                outColor = color * _BaseColor;

            #ifdef _WRITE_RENDERING_LAYERS
                uint renderingLayers = GetMeshRenderingLayer();
                outRenderingLayers = float4(EncodeMeshRenderingLayer(renderingLayers), 0, 0, 0);
            #endif
            }
            ENDHLSL
        }
    }
    FallBack "Hidden/Universal Render Pipeline/FallbackError"
}